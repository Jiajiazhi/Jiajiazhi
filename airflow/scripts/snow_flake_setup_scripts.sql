use role sysadmin;
use database my_demo
;
use warehouse compute_wh;

-- json file format for the data load
CREATE OR REPLACE FILE FORMAT LEARN.NDJSON 
TYPE = JSON;

-- stage table to store ingestion records
CREATE OR REPLACE TABLE LEARN.STG_ORDER(
  SALESORDERID BIGINT ,
  PRODUCTID BIGINT,
  ORDERDATE DATE, 
  PRODUCTNAME VARCHAR,
  POSTALCODE VARCHAR, 
  PRODUCTORDERQTY INT,
  PRODUCTSALES DOUBLE, 
  SYS_CHANGE_OP VARCHAR, 
  ORDERUPDATEDTM TIMESTAMP,
  SRC_CDT_BATCH_ID BIGINT
)


CREATE OR REPLACE TABLE LEARN.ORDERS(
  SALESORDERID BIGINT ,
  PRODUCTID BIGINT,
  ORDERDATE DATE, 
  PRODUCTNAME VARCHAR,
  POSTALCODE VARCHAR, 
  PRODUCTORDERQTY INT, 
  PRODUCTSALES DOUBLE, 
  ORDERUPDATEDTM TIMESTAMP,
  SRC_CDT_BATCH_ID BIGINT,
  DELETED_FLG INT
)

CREATE OR REPLACE VIEW LEARN.ORDER_SUMMARY
SELECT  ORDERDATE, 
        HOUR(ORDERUPDATEDTM) AS ORDERHOUR, 
        PRODUCTID,
        PRODUCTNAME,
        POSTALCODE,
        SUM(PRODUCTORDERQTY) AS PRODUCTSALESVOLUME,
        SUM(PRODUCTSALES) AS PRODUCTSALES
FROM LEARN.ORDERS
WHERE DELETED_FLG = 0
GROUP BY 1,2,3,4,5;


MERGE INTO LEARN.ORDERS A 
USING 
(
        select  salesorderid, orderdate,postalcode,productid,productname,
                orderupdatedtm, src_cdt_batch_id,deleted_flg , 
                sum(productorderqty) as productorderqty, 
                sum(productsales) as productsales
        from LEARN.STG_ORDER 
        group by salesorderid, orderdate,postalcode,productid,productname,
                orderupdatedtm, src_cdt_batch_id,deleted_flg , 
)B 
ON 
A.SALESORDERID = B.SALESORDERID 
AND A.PRODUCTID = B.PRODUCTID 
WHEN MATCHED THEN UPDATE SET 
ORDERDATE = CASE WHEN B.SYS_CHANGE_OP <> 'D' THEN B.ORDERDATE ELSE A.ORDERDATE END , 
PRODUCTID = CASE WHEN B.SYS_CHANGE_OP <> 'D' THEN B.PRODUCTID ELSE A.PRODUCTID END, 
POSTALCODE = CASE WHEN B.SYS_CHANGE_OP <> 'D' THEN B.POSTALCODE ELSE A.POSTALCODE END, 
PRODUCTNAME = CASE WHEN B.SYS_CHANGE_OP <> 'D' THEN B.PRODUCTNAME ELSE A.PRODUCTNAME END, 
PRODUCTORDERQTY = CASE WHEN B.SYS_CHANGE_OP <> 'D' THEN B.PRODUCTORDERQTY ELSE A.PRODUCTORDERQTY END, 
PRODUCTSALES = CASE WHEN B.SYS_CHANGE_OP <> 'D' THEN B.PRODUCTSALES ELSE A.PRODUCTSALES END,
ORDERUPDATEDTM = B.ORDERUPDATEDTM,
SRC_CDT_BATCH_ID = B.SRC_CDT_BATCH_ID, 
DELETED_FLG = CASE WHEN B.SYS_CHANGE_OP = 'D' THEN 1 ELSE 0 END
WHEN NOT MATCHED THEN INSERT (
  SALESORDERID ,
  PRODUCTID ,
  ORDERDATE , 
  PRODUCTNAME ,
  POSTALCODE , 
  PRODUCTORDERQTY , 
  PRODUCTSALES , 
  ORDERUPDATEDTM ,
  SRC_CDT_BATCH_ID ,
  DELETED_FLG 
)VALUES (
B.SALESORDERID ,
B.PRODUCTID ,
B.ORDERDATE , 
B.PRODUCTNAME ,
B.POSTALCODE , 
B.PRODUCTORDERQTY , 
B.PRODUCTSALES , 
B.ORDERUPDATEDTM ,
B.SRC_CDT_BATCH_ID ,
0
);
